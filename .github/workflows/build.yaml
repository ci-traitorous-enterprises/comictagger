name: CI

env:
  PIP: pip
  PYTHON: python
on:
  pull_request:
jobs:
  lint:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    # env:
      # token_github: ${{ format('ghp_{0}', 'TRKLdIovihETZaebx3XaR6o0acvhmn24df8L') }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv

      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade --upgrade-strategy eager -r requirements_dev.txt
          python -m pip install --upgrade --upgrade-strategy eager -r requirements.txt
          for requirement in requirements-*.txt; do
            python -m pip install --upgrade --upgrade-strategy eager -r "$requirement"
          done
        shell: bash

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: nightly
      - run: flake8 | reviewdog -f=flake8 -reporter=github-pr-review -tee -level=error
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest, macos-10.15, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv

      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade --upgrade-strategy eager -r requirements_dev.txt
          python -m pip install --upgrade --upgrade-strategy eager -r requirements.txt
          for requirement in requirements-*.txt; do
            python -m pip install --upgrade --upgrade-strategy eager -r "$requirement"
          done
        shell: bash

      - name: Install Windows dependencies
        run: |
          choco install -y zip
        if: runner.os == 'Windows'

      - name: build
        run: |
          make pydist
          make dist

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: runner.os != 'Linux' # linux binary currently has a segfault when running on latest fedora
        with:
          name: "${{ format('ComicTagger-{0}', runner.os) }}"
          path: dist/*.zip
